name: Django CI

on:
  push:
    branches: [ main, "feature/*" ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    timeout-minutes: 5

    runs-on: ubuntu-latest

    env:
      SECRET_KEY: "secret_key"
      GITHUB_WORKFLOW: "true"
      CI: "true"
      DATABASE_URL: "postgres://postgres:password@127.0.0.1:5432/test"
      PYTHONPATH: "${{ github.workspace }}"
      # Test environment variables for trading bot
      ALPACA_API_KEY: "test_api_key"
      ALPACA_SECRET_KEY: "test_secret_key"
      DJANGO_SECRET_KEY: "test_django_secret_key_for_ci"
      DRY_RUN: "true"
      
    services:
      postgres:
        image: postgres:16.0
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff
          pip install -e .  # Install package in development mode
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h 127.0.0.1 -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done
      - name: Create database users
        run: |
          # Create additional users that Django might need
          PGPASSWORD=password psql -h 127.0.0.1 -U postgres -d test -c "CREATE ROLE root WITH LOGIN PASSWORD 'password';" || true
          PGPASSWORD=password psql -h 127.0.0.1 -U postgres -d test -c "CREATE ROLE runner WITH LOGIN PASSWORD 'password';" || true
          PGPASSWORD=password psql -h 127.0.0.1 -U postgres -d test -c "GRANT ALL PRIVILEGES ON DATABASE test TO root;" || true
          PGPASSWORD=password psql -h 127.0.0.1 -U postgres -d test -c "GRANT ALL PRIVILEGES ON DATABASE test TO runner;" || true
      - name: Test Django setup
        run: python tests/integration/test_django_setup.py
      - name: Apply Migrations
        run: python manage.py migrate
      - name: Run tests
        run: python manage.py test backend
      - name: Test CLI tools
        run: |
          # Test simple CLI validator
          python simple_cli.py
          # Test production CLI commands (non-interactive)
          python run.py validate
          python run.py status
          python run.py market
          # Test integration examples
          python integration_examples.py
      - name: Lint with ruff
        run: ruff check . --statistics
