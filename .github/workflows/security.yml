name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for accurate SBOM

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: "."
          format: "spdx-json"
          output-file: "sbom.spdx.json"

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  trivy-fs:
    name: Filesystem Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: "fs"
          format: "table"
          ignore-unfixed: true
          severity: "HIGH,CRITICAL"
          exit-code: "1"

      - name: Run Trivy filesystem scan (JSON)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: "fs"
          format: "json"
          output: "trivy-fs-results.json"

      - name: Upload Trivy results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-results
          path: trivy-fs-results.json

  trivy-image:
    name: Container Image Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t wallstreetbots:latest .

      - name: Run Trivy image scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: "wallstreetbots:latest"
          format: "table"
          ignore-unfixed: true
          severity: "HIGH,CRITICAL"
          exit-code: "1"

      - name: Run Trivy image scan (JSON)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: "wallstreetbots:latest"
          format: "json"
          output: "trivy-image-results.json"

      - name: Upload Trivy image results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-results
          path: trivy-image-results.json

  gitleaks:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret detection

      - name: Run Gitleaks
        uses: zricethezav/gitleaks-action@v2
        with:
          config-path: ".gitleaks.toml"
          verbose: true

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run Safety check
        run: |
          safety check --json --output safety-results.json || true

      - name: Run Bandit security linter
        run: |
          bandit -r backend/ -f json -o bandit-results.json || true

      - name: Upload security results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-security-results
          path: |
            safety-results.json
            bandit-results.json

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses

      - name: Check licenses
        run: |
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=markdown

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sbom, trivy-fs, gitleaks, dependency-check, license-check]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "Generated on: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Scan Results" >> security-summary.md
          echo "- SBOM: Generated" >> security-summary.md
          echo "- Filesystem Scan: Completed" >> security-summary.md
          echo "- Secret Detection: Completed" >> security-summary.md
          echo "- Dependency Check: Completed" >> security-summary.md
          echo "- License Check: Completed" >> security-summary.md
          
          echo "" >> security-summary.md
          echo "## Artifacts" >> security-summary.md
          echo "- SBOM: sbom.spdx.json" >> security-summary.md
          echo "- Trivy FS Results: trivy-fs-results.json" >> security-summary.md
          echo "- Security Results: dependency-security-results/" >> security-summary.md
          echo "- License Report: licenses.json" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

